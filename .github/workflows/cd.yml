name: CD

on:
  push:
    branches:
      - prod

jobs:
  cd-build:
    runs-on: ubuntu-20.04

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: install pnpm
        run: npm i -g pnpm

      - name: Caching dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.json')}}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}

      - name: Install package
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm i --no-frozen-lockfile

      - name: env set
        run: |
          touch .env
          echo POSTGRESQL_DB_URL=${{secrets.POSTGRESQL_DB_URL}} >> .env
          echo JWT_PRIVATE=${{secrets.JWT_PRIVATE}} >> .env
          echo JWT_SECRET=${{secrets.JWT_SECRET}} >> .env
          echo PORT=${{secrets.PORT}} >> .env
          echo SALT=${{secrets.SALT}} >> .env
          echo ORIGIN=${{secrets.ORIGIN}} >> .env
          echo GOOGLE_CLIENT_ID=${{secrets.GOOGLE_CLIENT_ID}} >> .env
          echo GOOGLE_SECURE_PASSWORD=${{secrets.GOOGLE_SECURE_PASSWORD}} >> .env
          echo GOOGLE_CALLBACK_URL=${{secrets.GOOGLE_CALLBACK_URL}} >> .env
          echo LOG_EMAIL=${{secrets.LOG_EMAIL}} >> .env
          echo AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY}} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} >> .env
          echo EMAIL_HEADER=${{secrets.EMAIL_HEADER}} >> .env
          echo REDIS_HOST=${{secrets.REDIS_HOST}} >> .env
          echo REDIS_PORT=${{secrets.REDIS_PORT}} >> .env
          echo REDIS_PASSWORD=${{secrets.REDIS_PASSWORD}} >> .env
          echo TESTING_TOKEN=${{secrets.TESTING_TOKEN}} >> .env
          echo TESTING_PASSWORD=${{secrets.TESTING_PASSWORD}} >> .env

      - name: docker
        run: docker build --cache-from ${{ secrets.DOCKERHUB_USERNAME }}/dias:latest -t ${{ secrets.DOCKERHUB_USERNAME }}/dias:latest -f ./dockerfile ./

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}

      - name: push to Docker Hub
        run: docker push ${{secrets.DOCKERHUB_USERNAME}}/dias:latest

      - name: Get GitHub Actions IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Add Github Actions IP to Security group
        env:
          AWS_DEFAULT_REGION: ap-northeast-2
        run: |
          aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.AWS_EC2_SG_ID }} \
          --protocol tcp --port ${{ secrets.AWS_PORT }} \
          --cidr ${{ steps.ip.outputs.ipv4 }}/32 \

      - name: EC2 Production Server Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_AWS_HOST }}
          port: ${{ secrets.AWS_PORT }}
          username: ${{ secrets.PROD_AWS_USERNAME }}
          key: ${{ secrets.PROD_AWS_SSH_KEY }}
          script: |
            groupadd docker
            sudo usermod -aG docker $USER
            newgrp docker
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/dias:latest
            sudo docker run -d -p ${{ secrets.PORT }}:${{ secrets.PORT }} ${{ secrets.DOCKERHUB_USERNAME }}/dias:latest
            sudo docker rm -f $(docker ps -a -f status=exited -q)
            sudo docker image prune -f

      - name: Remove Github Actions IP From Security Group
        continue-on-error: true
        run: |
          aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.AWS_EC2_SG_ID }} \
          --protocol tcp --port ${{ secrets.AWS_PORT }} \
          --cidr ${{ steps.ip.outputs.ipv4 }}/32
