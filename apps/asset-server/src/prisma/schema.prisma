generator client {
  provider = "prisma-client-js"
  output        = "./client"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_DB")
}

model Contests {
  id         String     @id() @default(uuid())
  name       String
  start_date DateTime   @default(now())
  end_date   DateTime   @default(now())
  purpose    String
  audience   String
  place      String
  status     CONTEST_STATUS
  Awards     Awards[]
  Projects   Projects[]
  Vote       Vote[]
}

model Projects {
  id             String         @id() @default(uuid())
  contest_id     String
  contest        Contests       @relation(references: [id], fields: [contest_id])
  name           String
  image          String
  members        String[]
  skills         String[]
  status         PROJECT_STATUS @default(PENDING)
  auth_category  CATEGORY
  introduction   String
  description    String
  video_link     String
  Vote           Vote[]
  Like           Like[]
  created_at      DateTime      @default(now())
}

model Awards {
  id         String   @id() @default(uuid())
  contest_id String
  contest    Contests @relation(references: [id], fields: [contest_id])
  name       String
  count      Int
}

model Vote {
  contest_id String
  project_id String
  user_id    String
  contest    Contests @relation(references: [id], fields: [contest_id])
  project    Projects @relation(references: [id], fields: [project_id])

  @@id([project_id, user_id])
}

model Like {
  project_id String
  user_id    String
  project    Projects @relation(references: [id], fields: [project_id])

  @@id([project_id, user_id])
}

model Club {
  club_id String @id @default(uuid())
  club_name String @unique
  is_active Boolean @default(true)
}

enum CONTEST_STATUS {
  BEFORE
  NOW
  PENDING
  FINISHED
}

enum PROJECT_STATUS {
  PENDING
  APPROVAL
  REJECTED
  MODIFICATION
  DELETION
}

enum CATEGORY {
  PERSONAL
  TEAM
  CLUB
}
