// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v4.25.2
// source: src/proto/dias.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "dias";

export enum ROLE {
  Student = 0,
  Teacher = 1,
  Admin = 2,
  UNRECOGNIZED = -1,
}

export interface user {
  number: number;
  id: string;
  userId: string;
  email: string;
  name: string;
  role: ROLE;
  provided: string;
}

export interface isValid {
  statusCode: number;
  statusMsg: string;
  isValid: boolean;
  user?: user | undefined;
}

export interface JwtGuardRequest {
  authorization: string;
}

export interface GoogleAuthGuardRequest {
  authorization: string;
}

export const DIAS_PACKAGE_NAME = "dias";

export interface GuardClient {
  jwtAuthGuard(request: JwtGuardRequest): Observable<isValid>;

  googleAuthGuard(request: GoogleAuthGuardRequest): Observable<isValid>;
}

export interface GuardController {
  jwtAuthGuard(request: JwtGuardRequest): Promise<isValid> | Observable<isValid> | isValid;

  googleAuthGuard(request: GoogleAuthGuardRequest): Promise<isValid> | Observable<isValid> | isValid;
}

export function GuardControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["jwtAuthGuard", "googleAuthGuard"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Guard", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Guard", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const GUARD_SERVICE_NAME = "Guard";
